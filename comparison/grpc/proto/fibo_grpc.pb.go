// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FiboServiceClient is the client API for FiboService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FiboServiceClient interface {
	Fibonacci(ctx context.Context, in *FiboRequest, opts ...grpc.CallOption) (*FiboResponse, error)
}

type fiboServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFiboServiceClient(cc grpc.ClientConnInterface) FiboServiceClient {
	return &fiboServiceClient{cc}
}

func (c *fiboServiceClient) Fibonacci(ctx context.Context, in *FiboRequest, opts ...grpc.CallOption) (*FiboResponse, error) {
	out := new(FiboResponse)
	err := c.cc.Invoke(ctx, "/proto.FiboService/Fibonacci", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FiboServiceServer is the server API for FiboService service.
// All implementations should embed UnimplementedFiboServiceServer
// for forward compatibility
type FiboServiceServer interface {
	Fibonacci(context.Context, *FiboRequest) (*FiboResponse, error)
}

// UnimplementedFiboServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFiboServiceServer struct {
}

func (UnimplementedFiboServiceServer) Fibonacci(context.Context, *FiboRequest) (*FiboResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fibonacci not implemented")
}

// UnsafeFiboServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FiboServiceServer will
// result in compilation errors.
type UnsafeFiboServiceServer interface {
	mustEmbedUnimplementedFiboServiceServer()
}

func RegisterFiboServiceServer(s grpc.ServiceRegistrar, srv FiboServiceServer) {
	s.RegisterService(&FiboService_ServiceDesc, srv)
}

func _FiboService_Fibonacci_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FiboRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FiboServiceServer).Fibonacci(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FiboService/Fibonacci",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FiboServiceServer).Fibonacci(ctx, req.(*FiboRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FiboService_ServiceDesc is the grpc.ServiceDesc for FiboService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FiboService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FiboService",
	HandlerType: (*FiboServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fibonacci",
			Handler:    _FiboService_Fibonacci_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fibo.proto",
}
